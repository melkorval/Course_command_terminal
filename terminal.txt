whoami - print the user name currently logged in to the terminal session
man - manual for understand other command -- man <command>

Commands for help or exit 

h H  Display this help
q :q Q :Q ZZ  Exit
:%s/oldword/newword/gci  Replace word vim

clear - clear the terminal screen
clear -x -- let to use scrollback -- ctrl + l
pwd - command to know where you are 
ls <foldername> - see all the files of a folder -- ls <foldername>
ls -al <foldername> -- show more information about files inside folder -- ll
cd <foldername> -- change directory
mkdir folder1 folder2 -- create folders
mkdir -p folder1/folder2 -- create multiple folders
rmdir folder -- delete empty folder
rm -rf folder -- delete folder with files
mv -- move files or rename files
cp <filename> <path_directory>-- copy files
cp -r <foldername> <path_directory> -- copy folders
open <filename> -- open files or folders (install this command)
touch <filename> -- create files
find <path_directory> -<parameter> <value> -- search files or folder
find . -name "*.js" -- search in the current folder all the files extension js 
find folder1 folder2 -name filename.extension -- search a file under multiple directories
find <path> -type d -name <foldername> -- find directories
find <path> -type f -name <filename> -- search only files
find <path> -type f -size +<size_bytes> -- search a files for size
find <path> -type f -size +<smaller_size> -size -<bigger_size> -- search files between interval of size (k for kB  and M for MB)
find <path> -type f -size +100k -size -1M -- search files between the size 100kB and 1M
find <path> -type d -name directory1 -or -name directory2 -- search directory 1 or directory 2
find <path> -type f -mtime +3 -- search files edited more than 3 days ago 
find <path> -type f -mtime -1 --search files edited in the last 24 hours
find <path> -type f -mtime -1 -delete -- this deletes all the files edited in the last 24 hours
ln <original> <link> -- create a hard link -- link is defined as pointer to another file
ln -s <original> <link> -- crate a soft link
gzip filename -- compress file, this action delete the file original
gzip -c filename > filename.gz -- avoid delete original file when compress -- gzip -k filename
gzip <number> filename -- levels of compress (1 - 9 worst to better compression)
gzip filename1 filename2 -- compress multiple files
gzip -r a_foldername -- compress all the files in a directory
gzip -kv filename -- compression percentage information
gzip -d filename -- decompress a file
alias <newcommand> = <combination_commands> -- create new command, example: alias add_commit='git add . && git push origin main'
alias -- show all the list of alias -- add this command to terminal permanent in .bashrc in section more alias
cat <filename> -- see content of files
cat <filename1> <filename2> -- see content multiple files
cat <filename1> <filename2> > <filename3> -- concatenate the content of multiple files into a new file 
cat <filename1> <filename2> >> <filename3> -- append the content of multiple files into a new file
less <filename> -- show inside of a file as vim
tail <filename> -- show the file at the end
wc <filename> -- show more information of file, the first number is lines, the second is words and third is bytes
wc -l <filename> -- show only number of lines
wc -w <filename> -- show only numbers of words
wc -c <filename> -- show only numbers of bytes
grep <element_search> <filename> -- search a element_search or word in a files
grep -n <element_search> <filename> -- search a element_search or word in a file and show the line numbers
grep -nC <number> <element_search> <filename> -- show a line numbers before and line numbers after of element to search

Note: operator | is use execute a command but show input other command
less <filename> | grep -n <element_search> -- show the file but the section where is the element to search -- grep -n <element_search> <filename>
sort <filename> -- ordered a list of word vertical
sort -r <filename> -- inverse ordered
uniq <filename> -- report or omit repeated lines adjacent -- sort <filename> | uniq
diff <filename1> <filename2> -- compare two files with similar information
diff -y <filename1> <filename2> -- compare for lines
diff -u <filename1> <filename2> -- compare version as git diff
diff -r <directory1> <directory2> -- compare directories
echo "Message_text" -- print text in console
echo * -- see the files inside a folder
echo <letter>* -- search a folder that start with a letter
echo "Message_text" >> filename -- append the output to a file
echo $(Command) -- execute a command
chown <owner> <filename> -- change the owner to another user
sudo chown <owner> <filename> -- we can modify a file with permission of root
chown -R <owner> <filename> -- we can modify permission for a directory and all its files

chmod <parameter> <filename> -- change the permission given to a file. parameter: a -- all, u -- user, g -- group, o -- others, r -- read, w -- write, 
x -- execute,  + add, - remove

chmod a+r <filename> -- everyone can now read
chmod a+rw <filename> -- everyone can now read and write
chmod -r <foldername> -- make a folder without read, require be root
chmod +r <foldername> -- make a folder for read

for the parameter of chmod we can use numbers where:

0 - no permission
1 - can execute 
2 - can write
3 - can write, execute
4 - can read
5 - can read, execute
6 - can read, write
7 - can read, write and execute

example: chmod 777 filename 

umask - show permission have default and we can modify
umask -S - show human-readble notation (u - user, g - group, o - others)
umask <numbers> 

0 - read, write and execute
1 - read and write
2 - read and execute
3 - read only
4 - write and execute
5 - write only
6 - execute only 
7 - no permission

umask u+rwx -- permission read, write and execute

du - calculate the size of directory, show the size in bytes
du * - calculate the size of each file individually
du -m -- show size in megabytes
du -g -- show size gigabytes

df -- used to get disk usage information
df -h -- show values in a human-readble format
df <directory> -- show information of file or directory

top -- show the list the processes running in real time

kill -- send a variety of signals to a program
kill <PID> -- see PID with top, for default sent the signal TERM 
kill -HUP <PID> -- HUP means hang up, closed before terminating the process
kill -INT <PID> -- INT means interrupt, terminates the process.
kill -KILL <PID> -- immediately stops and terminates the process.
kill -TERM <PID> -- TERM means terminate, kill process
kill -CONT <PID> -- continue process
kill -STOP <PID> -- stop process but no terminate process

1 - HUP
2 - INT
9 - kill
15 - TERM or STOP
18 - CONT

killall <name> -- kill all process with name of program in execution (too use HUP, INT, KILL, TERM, CONT and STOP)

jobs --- see all the process in background
for run in process background use &
Example: top & --- top is background

CTRL + Z --- suspend a processes

su <username>  --- logged with user in terminal
sudo -- permission of root
passwd --- change passoword root user
ping <address_website> ---- send request a network host
traceroute <address_website>  --- show route for reach to host
history  --- show history of Commands

VARIABLENAME = "value"  --- declare variable
echo $VARIABLENAME  --- show value of the variable

when we created a variable a can export to a child process with:
export VARIABLENAME="value"  --- how to export to a script

Sometimes you need to append something to a variable
export PATH=$PATH:/new/path
export -n VARIABLENAME  --- remove variable

contab --- we could a command perform something every, or every day, or every 2 weeks, or on weekends. info: https://crontab-generator.org/

uname --- return Operating System codename (name kernel)
uname -mp --- return the hardware name and processor architecture name

env -- pass environment variables
env  -i NAME="melkor" node app.js  ---- change value of the variable NAME in app.js
printenv PATH --- print the values of environment variables

Format USB and Disk

lsblk    --- see name of the disk, for this case is sdb1
sudo umount /dev/sdb1
sudo mkfs.vfat -F 32 "nameusb" /dev/sdb1
sudo mkfs.ntfs -L "nameusb" -f /dev/sdb1


Fix Error

- Error broker packages

sudo apt --fix-missing update
sudo apt install -f
sudo dpkg --configure -a
sudo apt clean
sudo apt update
sudo apt-get dist-upgrade

RAR

rar a namefile.rar path_file   --- compress file
rar x namefile.rar path_file   ----descompress file

Mount can't find device in /etc/fstab [solution]

mkdir /mnt/mydrive/
mount /dev/sdb1 /mnt/mydrive 
